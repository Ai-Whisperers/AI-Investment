name: Comprehensive Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD: 95

jobs:
  # Fast unit tests that must pass quickly
  fast-unit-tests:
    name: Fast Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install test dependencies
        working-directory: ./apps/api
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run fast unit tests
        working-directory: ./apps/api
        run: |
          pytest tests/unit/services tests/unit/utils tests/unit/routers -v --tb=short --maxfail=5
      
      - name: Check coverage threshold
        working-directory: ./apps/api
        run: |
          pytest tests/unit --cov=app --cov-report=term-missing --cov-fail-under=50

  # Critical financial calculation tests - 100% coverage required
  financial-tests:
    name: Financial Calculation Tests (100% Coverage Required)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./apps/api
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run financial calculation tests
        working-directory: ./apps/api
        run: |
          pytest tests/unit/services -v \
            --cov=app.services.strategy_modules \
            --cov=app.services.performance_modules \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-fail-under=80
      
      - name: Upload financial test coverage
        uses: actions/upload-artifact@v4
        with:
          name: financial-coverage-report
          path: ./apps/api/htmlcov/

  # Contract tests between frontend and backend
  contract-tests:
    name: API Contract Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./apps/api
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run contract tests
        working-directory: ./apps/api
        run: |
          pytest tests/unit/schemas -v \
            --tb=short \
            --cov=app.schemas \
            --cov-fail-under=80

  # Integration tests with real database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: waardhaven_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./apps/api
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run integration tests
        working-directory: ./apps/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/waardhaven_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-integration-tests
          TWELVEDATA_API_KEY: test-api-key
          ACCESS_TOKEN_EXPIRE_MINUTES: 60
          JWT_ALGORITHM: HS256
        run: |
          pytest tests/integration -v \
            --tb=short \
            --cov=app \
            --cov-report=term-missing \
            --cov-fail-under=70

  # Performance and benchmark tests
  performance-tests:
    name: Performance Benchmark Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./apps/api
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install locust
      
      - name: Run performance benchmarks
        working-directory: ./apps/api
        run: |
          pytest tests/performance -m "benchmark" \
            --benchmark-only \
            --benchmark-autosave \
            --benchmark-compare \
            --benchmark-compare-fail=mean:10%
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: ./apps/api/.benchmarks/

  # Frontend tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        working-directory: ./apps/web
        run: npm ci
      
      - name: Run unit tests
        working-directory: ./apps/web
        run: |
          npm run test:unit -- --coverage --coverageThreshold='{"global":{"branches":90,"functions":90,"lines":90,"statements":90}}'
      
      - name: Run component tests
        working-directory: ./apps/web
        run: |
          npm run test:components -- --coverage
      
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./apps/web/coverage/

  # E2E tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [fast-unit-tests, contract-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: waardhaven_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install API dependencies
        working-directory: ./apps/api
        run: |
          pip install -r requirements.txt
      
      - name: Start API server
        working-directory: ./apps/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/waardhaven_test
          SECRET_KEY: test-secret-key
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 5
      
      - name: Install frontend dependencies
        working-directory: ./apps/web
        run: npm ci
      
      - name: Install Playwright
        working-directory: ./apps/web
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        working-directory: ./apps/web
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: |
          npm run build
          npm run test:e2e
      
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: ./apps/web/test-results/

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install safety bandit
          npm install -g snyk
      
      - name: Run Python security scan
        working-directory: ./apps/api
        run: |
          safety check -r requirements.txt
          bandit -r app/ -f json -o bandit-report.json
      
      - name: Run JavaScript security scan
        working-directory: ./apps/web
        run: |
          npm audit --audit-level=moderate
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            ./apps/api/bandit-report.json
            ./apps/web/npm-audit.json

  # Smoke tests for production
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: pip install pytest requests
      
      - name: Run smoke tests
        working-directory: ./apps/api
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          pytest tests/smoke -m "smoke" -v --tb=short

  # Coverage report aggregation
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [financial-tests, contract-tests, integration-tests, frontend-tests]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
      
      - name: Merge coverage reports
        run: |
          pip install coverage
          coverage combine coverage-reports/*/coverage.xml
          coverage report
          coverage html
      
      - name: Check total coverage
        run: |
          COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi
      
      - name: Upload final coverage report
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage-reports
          fail_ci_if_error: true
          verbose: true

  # Final status check
  test-gate:
    name: Test Gate
    runs-on: ubuntu-latest
    needs: [
      fast-unit-tests,
      financial-tests,
      contract-tests,
      integration-tests,
      frontend-tests,
      security-tests
    ]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.financial-tests.result }}" != "success" ]]; then
            echo "Financial tests failed - blocking deployment"
            exit 1
          fi
          if [[ "${{ needs.contract-tests.result }}" != "success" ]]; then
            echo "Contract tests failed - API compatibility broken"
            exit 1
          fi
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "Security tests failed - vulnerabilities detected"
            exit 1
          fi
          echo "All critical tests passed!"