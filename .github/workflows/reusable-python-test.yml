name: Reusable Python Test Workflow

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
      working-directory:
        required: false
        type: string
        default: './apps/api'
      requirements-file:
        required: false
        type: string
        default: 'requirements.txt'
      test-command:
        required: false
        type: string
        default: 'pytest tests/ -v --cov=app'
    secrets:
      DATABASE_URL:
        required: true
      JWT_SECRET_KEY:
        required: true
      TWELVEDATA_API_KEY:
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/{1}', inputs.working-directory, inputs.requirements-file)) }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ inputs.requirements-file }}
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_ALGORITHM: HS256
          TWELVEDATA_API_KEY: ${{ secrets.TWELVEDATA_API_KEY }}
        run: ${{ inputs.test-command }}

      - name: Generate test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Python Test Results
          path: '${{ inputs.working-directory }}/test-results.xml'
          reporter: java-junit