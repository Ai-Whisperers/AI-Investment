name: Frontend Tests

on:
  push:
    branches: [main, develop]
    paths: ['apps/web/**', '.github/workflows/test-frontend.yml']
  pull_request:
    branches: [main, develop]
    paths: ['apps/web/**']
  workflow_call:

env:
  NODE_VERSION: '20'
  WORKING_DIR: './apps/web'

jobs:
  test-frontend:
    name: Frontend Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --prefer-offline --no-audit

      - name: Verify installation
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          node --version
          npm --version
          npx jest --version

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIR }}
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: |
          npm run test -- --ci --coverage --maxWorkers=2 --passWithNoTests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIR }}/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            ${{ env.WORKING_DIR }}/coverage/
            ${{ env.WORKING_DIR }}/test-results.xml

  lint-frontend:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run lint

      - name: Run type checking
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run type-check

      - name: Run Prettier check
        working-directory: ${{ env.WORKING_DIR }}
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  build-frontend:
    name: Frontend Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        working-directory: ${{ env.WORKING_DIR }}
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL || 'http://localhost:8000' }}
          NODE_ENV: production
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.WORKING_DIR }}/.next
          retention-days: 3

  security-frontend:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm audit --audit-level moderate --json > npm-audit.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-reports
          path: ${{ env.WORKING_DIR }}/npm-audit.json