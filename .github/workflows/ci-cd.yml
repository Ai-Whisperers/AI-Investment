name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  setup:
    name: Setup Pipeline
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      web-changed: ${{ steps.changes.outputs.web }}
      docs-changed: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'requirements.txt'
            web:
              - 'apps/web/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            docs:
              - 'docs/**'
              - '**.md'

  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        component: [api, web]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        if: matrix.component == 'api'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Node.js
        if: matrix.component == 'web'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        if: matrix.component == 'web'
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Lint Python (API)
        if: matrix.component == 'api'
        working-directory: ./apps/api
        run: |
          pip install ruff black mypy
          ruff check .
          black --check .
          mypy app --ignore-missing-imports

      - name: Lint TypeScript (Web)
        if: matrix.component == 'web'
        working-directory: ./apps/web
        run: |
          pnpm install --frozen-lockfile
          pnpm run lint || true
          pnpm run type-check || true

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    if: needs.setup.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: waardhaven_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./apps/api
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run tests
        working-directory: ./apps/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/waardhaven_test
          JWT_SECRET_KEY: test-secret-key
          JWT_ALGORITHM: HS256
          TWELVEDATA_API_KEY: test-key
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term || true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage.xml
          flags: api
          name: api-coverage

  test-web:
    name: Test Web
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    if: needs.setup.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: ./apps/web
        run: pnpm install --frozen-lockfile

      - name: Run tests
        working-directory: ./apps/web
        run: |
          pnpm run test || true
          pnpm run test:e2e || true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/web/coverage/lcov.info
          flags: web
          name: web-coverage

  build-api:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    needs: [test-api]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/api:${{ github.sha }}
            ghcr.io/${{ github.repository }}/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-web:
    name: Build Web Application
    runs-on: ubuntu-latest
    needs: [test-web]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: ./apps/web
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: ./apps/web
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: ./apps/web/.next

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python dependency check
        working-directory: ./apps/api
        run: |
          pip install safety
          safety check -r requirements.txt || true

      - name: Node dependency check
        working-directory: ./apps/web
        run: |
          npx audit-ci --moderate || true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-api, build-web, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.waardhaven.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy API to staging
        run: |
          echo "Deploying API to staging environment"
          # Add deployment commands here

      - name: Deploy Web to staging
        run: |
          echo "Deploying Web to staging environment"
          # Add deployment commands here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging"
          # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-api, build-web, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://waardhaven.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy API to production
        run: |
          echo "Deploying API to production environment"
          # Add deployment commands here

      - name: Deploy Web to production
        run: |
          echo "Deploying Web to production environment"
          # Add deployment commands here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on production"
          # Add smoke test commands here

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()