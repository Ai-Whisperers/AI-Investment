name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  BACKEND_DIR: ./apps/api
  FRONTEND_DIR: ./apps/web

jobs:
  # Backend Test Job
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.BACKEND_DIR }}/requirements.txt
      
      - name: Install dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run unit tests
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci
          JWT_ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          SKIP_STARTUP_REFRESH: true
        run: |
          python -m pytest tests/unit -v --tb=short --cov=app --cov-report=xml --cov-report=html --cov-report=term
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-coverage
          path: |
            ${{ env.BACKEND_DIR }}/coverage.xml
            ${{ env.BACKEND_DIR }}/htmlcov/
      
      - name: Check coverage threshold
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          coverage_percent=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.get('line-rate'))*100)")
          echo "Coverage: ${coverage_percent}%"
          if (( $(echo "$coverage_percent < 45" | bc -l) )); then
            echo "Coverage ${coverage_percent}% is below 45% threshold"
            exit 1
          fi

  # Backend Code Quality
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort bandit
      
      - name: Run Ruff
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          ruff check . --fix --exit-non-zero-on-fix
      
      - name: Run Black
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          black . --check
      
      - name: Run isort
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          isort . --check-only
      
      - name: Run Bandit Security Scan
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            high_issues=$(python -c "import json; data=json.load(open('bandit-report.json')); print(len([i for i in data.get('results', []) if i['issue_severity'] == 'HIGH']))")
            if [ "$high_issues" -gt 0 ]; then
              echo "Found $high_issues high severity security issues"
              cat bandit-report.json
              exit 1
            fi
          fi

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci
      
      - name: Type check
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx tsc --noEmit
      
      - name: Run linter
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run lint
      
      - name: Run tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm test -- --coverage --watchAll=false
      
      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install backend dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run integration tests
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci
          JWT_ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          SKIP_STARTUP_REFRESH: true
        run: |
          python -m pytest tests/integration -v --tb=short
      
      - name: Run smoke tests
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci
        run: |
          python -m pytest tests/smoke -v --tb=short || true

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-quality, integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.waardhaven-autoindex.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Backend to Render (Staging)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
      
      - name: Deploy Frontend to Vercel (Staging)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel --token=$VERCEL_TOKEN --scope=$VERCEL_ORG_ID --yes --prod=false

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-quality, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://waardhaven-autoindex.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Backend to Render (Production)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_PROD_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
      
      - name: Deploy Frontend to Vercel (Production)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel --token=$VERCEL_TOKEN --scope=$VERCEL_ORG_ID --yes --prod
      
      - name: Run Production Health Checks
        run: |
          sleep 30  # Wait for deployment
          curl -f https://waardhaven-autoindex.com/health || exit 1
          curl -f https://api.waardhaven-autoindex.com/health || exit 1
      
      - name: Notify Slack
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            message="✅ Production deployment successful!"
          else
            message="❌ Production deployment failed!"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$message\\nCommit: ${{ github.sha }}\\nAuthor: ${{ github.actor }}\"}" \
            $SLACK_WEBHOOK