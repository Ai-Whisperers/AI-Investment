name: Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Run all tests in parallel
  run-tests:
    name: Test Execution
    strategy:
      fail-fast: false
      matrix:
        component: [backend, frontend]
    uses: ./.github/workflows/test-${{ matrix.component }}.yml
    secrets: inherit

  # Quality gate enforcement
  quality-gate:
    name: Quality Gate Enforcement
    runs-on: ubuntu-latest
    needs: [run-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Backend tests: ${{ needs.run-tests.outputs.backend-result || 'not-run' }}"
          echo "Frontend tests: ${{ needs.run-tests.outputs.frontend-result || 'not-run' }}"
          
          # Fail if any critical tests failed
          if [[ "${{ contains(needs.run-tests.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå Quality gate failed: Tests are failing"
            exit 1
          fi
          
          echo "‚úÖ Quality gate passed: All tests successful"

  # Code coverage enforcement
  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: [run-tests]
    if: always()
    
    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-coverage*"
          merge-multiple: true
          path: ./coverage

      - name: Check coverage thresholds
        run: |
          echo "Coverage files downloaded:"
          find ./coverage -name "*.xml" -o -name "*.json" | head -10
          
          # This is where you'd implement coverage threshold checking
          # For now, just pass - implement specific logic based on your coverage format
          echo "‚úÖ Coverage gate passed"

  # Security gate
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [run-tests]
    if: always()
    
    steps:
      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-security-reports"
          merge-multiple: true
          path: ./security

      - name: Check security issues
        run: |
          echo "Security reports downloaded:"
          find ./security -name "*.json" | head -10
          
          # Implement security threshold checking here
          # For now, just pass - customize based on your security tools
          echo "‚úÖ Security gate passed"

  # Final gate - all must pass
  final-gate:
    name: Final Quality Gate
    runs-on: ubuntu-latest
    needs: [quality-gate, coverage-gate, security-gate]
    if: always()
    
    steps:
      - name: Final check
        run: |
          # Check if all quality gates passed
          quality_gate="${{ needs.quality-gate.result }}"
          coverage_gate="${{ needs.coverage-gate.result }}"
          security_gate="${{ needs.security-gate.result }}"
          
          echo "Quality Gate: $quality_gate"
          echo "Coverage Gate: $coverage_gate"
          echo "Security Gate: $security_gate"
          
          if [[ "$quality_gate" != "success" ]] || \
             [[ "$coverage_gate" != "success" ]] || \
             [[ "$security_gate" != "success" ]]; then
            echo "‚ùå Final quality gate failed"
            exit 1
          fi
          
          echo "‚úÖ All quality gates passed - Ready for deployment"

      - name: Notify success
        if: success()
        run: |
          echo "üéâ Quality gates passed! Code is ready for deployment."

      - name: Notify failure
        if: failure()
        run: |
          echo "üö´ Quality gates failed! Please fix issues before deployment."