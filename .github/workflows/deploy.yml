name: Deploy Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

jobs:
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate deployment parameters
        id: validate
        run: |
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Version: ${{ github.event.inputs.version || 'latest' }}"
          echo "proceed=true" >> $GITHUB_OUTPUT

      - name: Check deployment windows
        if: github.event.inputs.environment == 'production'
        run: |
          HOUR=$(date +%H)
          DAY=$(date +%u)
          if [[ $DAY -ge 6 ]] || [[ $HOUR -lt 9 ]] || [[ $HOUR -gt 17 ]]; then
            echo "::warning::Deploying outside business hours"
          fi

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: needs.validate-deployment.outputs.proceed == 'true'
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure environment variables
        run: |
          case "${{ github.event.inputs.environment }}" in
            development)
              echo "API_URL=https://api-dev.waardhaven.com" >> $GITHUB_ENV
              echo "WEB_URL=https://dev.waardhaven.com" >> $GITHUB_ENV
              ;;
            staging)
              echo "API_URL=https://api-staging.waardhaven.com" >> $GITHUB_ENV
              echo "WEB_URL=https://staging.waardhaven.com" >> $GITHUB_ENV
              ;;
            production)
              echo "API_URL=https://api.waardhaven.com" >> $GITHUB_ENV
              echo "WEB_URL=https://waardhaven.com" >> $GITHUB_ENV
              ;;
          esac

      - name: Deploy database migrations
        run: |
          echo "Running database migrations for ${{ github.event.inputs.environment }}"
          # Add migration commands here

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy API to ${{ github.event.inputs.environment }}
        run: |
          echo "Deploying API version ${{ github.event.inputs.version || 'latest' }}"
          # Add deployment commands here

      - name: Health check
        run: |
          echo "Running health checks on API"
          # curl -f ${{ env.API_URL }}/health || exit 1

      - name: Run smoke tests
        run: |
          echo "Running API smoke tests"
          # Add smoke test commands

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy Web to ${{ github.event.inputs.environment }}
        run: |
          echo "Deploying Web version ${{ github.event.inputs.version || 'latest' }}"
          # Add deployment commands here

      - name: Health check
        run: |
          echo "Running health checks on Web"
          # curl -f ${{ env.WEB_URL }} || exit 1

      - name: Run smoke tests
        run: |
          echo "Running Web smoke tests"
          # Add smoke test commands

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Run integration tests
        if: success()
        run: |
          echo "Running integration tests on ${{ github.event.inputs.environment }}"
          # Add integration test commands

      - name: Update deployment tracking
        run: |
          echo "Recording deployment to ${{ github.event.inputs.environment }}"
          # Add deployment tracking commands

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment }} ${{ job.status }}
            Version: ${{ github.event.inputs.version || 'latest' }}
            Triggered by: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: post-deployment
    if: failure()
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Initiate rollback
        run: |
          echo "Rolling back deployment on ${{ github.event.inputs.environment }}"
          # Add rollback commands

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Rollback initiated for ${{ github.event.inputs.environment }} environment"
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}