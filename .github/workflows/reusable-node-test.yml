name: Reusable Node.js Test Workflow

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: '20'
      pnpm-version:
        required: false
        type: string
        default: '8'
      working-directory:
        required: false
        type: string
        default: './apps/web'
      build-command:
        required: false
        type: string
        default: 'pnpm run build'
      test-command:
        required: false
        type: string
        default: 'pnpm run test'
    secrets:
      NEXT_PUBLIC_API_URL:
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: pnpm install --frozen-lockfile

      - name: Run linting
        working-directory: ${{ inputs.working-directory }}
        run: |
          pnpm run lint || true
          pnpm run type-check || true

      - name: Build application
        working-directory: ${{ inputs.working-directory }}
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: ${{ inputs.build-command }}

      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.test-command }}

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ inputs.working-directory }}/coverage