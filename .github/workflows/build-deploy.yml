name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: 'staging'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quality gates must pass first
  quality-check:
    name: Quality Gates Check
    uses: ./.github/workflows/quality-gates.yml
    secrets: inherit

  # Build Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-check]
    if: success()
    
    strategy:
      matrix:
        component: [api, web]
    
    outputs:
      api-image: ${{ steps.build.outputs.api-image }}
      web-image: ${{ steps.build.outputs.web-image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./apps/${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image reference
        run: |
          echo "${{ matrix.component }}-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy to staging automatically on main branch
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.waardhaven.com
    
    steps:
      - name: Deploy API to Staging
        run: |
          echo "🚀 Deploying API to staging..."
          echo "Image: ${{ needs.build-images.outputs.api-image }}"
          # Add your deployment commands here
          # kubectl set image deployment/api api=${{ needs.build-images.outputs.api-image }}
          # or docker-compose up -d with new image

      - name: Deploy Web to Staging
        run: |
          echo "🚀 Deploying Web to staging..."
          echo "Image: ${{ needs.build-images.outputs.web-image }}"
          # Add your deployment commands here

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # curl -f https://staging.waardhaven.com/health
          # Add smoke test commands

  # Production deployment requires manual approval
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://waardhaven.com
    
    steps:
      - name: Deploy API to Production
        run: |
          echo "🚀 Deploying API to production..."
          echo "Image: ${{ needs.build-images.outputs.api-image }}"
          # Add your production deployment commands here

      - name: Deploy Web to Production
        run: |
          echo "🚀 Deploying Web to production..."
          echo "Image: ${{ needs.build-images.outputs.web-image }}"
          # Add your production deployment commands here

      - name: Run production health checks
        run: |
          echo "🏥 Running production health checks..."
          # curl -f https://waardhaven.com/health
          # Add comprehensive health checks

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.ref == 'refs/heads/main'
    environment:
      name: production
    
    steps:
      - name: Rollback production deployment
        run: |
          echo "⚠️ Rolling back production deployment..."
          # Add rollback commands here
          # kubectl rollout undo deployment/api
          # kubectl rollout undo deployment/web

      - name: Notify rollback
        run: |
          echo "🚨 Production rollback completed!"
          # Add critical notification logic