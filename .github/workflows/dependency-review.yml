name: Dependency Review

on:
  pull_request:
    paths:
      - '**/requirements*.txt'
      - '**/requirements*.in'
      - '**/package.json'
      - '**/package-lock.json'
      - '**/pyproject.toml'

permissions:
  contents: read
  pull-requests: write

jobs:
  python-dependency-check:
    name: Python Dependency Compatibility Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'dependencies') || contains(github.event.pull_request.labels.*.name, 'python')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install pip-tools
        run: pip install pip-tools pip-audit
        
      - name: Check Python dependency conflicts
        working-directory: ./apps/api
        run: |
          echo "## Python Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test if dependencies can be resolved
          pip-compile --dry-run requirements.in 2>&1 | tee compile-output.txt
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ **Dependencies can be resolved successfully**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Dependency resolution failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat compile-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Check for version conflicts
        working-directory: ./apps/api
        run: |
          # Install dependencies in a virtual environment
          python -m venv test-env
          source test-env/bin/activate
          
          pip install --upgrade pip
          pip install -r requirements.txt 2>&1 | tee install-output.txt
          
          # Check for conflicts
          pip check 2>&1 | tee check-output.txt
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ **No dependency conflicts detected**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Dependency conflicts detected:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat check-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          deactivate
          
      - name: Security audit
        working-directory: ./apps/api
        continue-on-error: true
        run: |
          # Create virtual environment for audit
          python -m venv audit-env
          source audit-env/bin/activate
          
          pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run pip-audit
          pip-audit --desc 2>&1 | tee audit-output.txt
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ **No known vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Vulnerabilities detected:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -n 20 audit-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          deactivate

  npm-dependency-check:
    name: NPM Dependency Compatibility Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'dependencies') || contains(github.event.pull_request.labels.*.name, 'javascript')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './apps/web/package-lock.json'
          
      - name: Check NPM dependencies
        working-directory: ./apps/web
        run: |
          echo "## NPM Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for outdated packages
          npm outdated --json > outdated.json || true
          
          if [ -s outdated.json ]; then
            echo "### Outdated Packages" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat outdated.json | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **All packages are up to date**" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Audit NPM packages
        working-directory: ./apps/web
        continue-on-error: true
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### NPM Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          npm audit --json > audit.json || true
          
          # Parse audit results
          vulnerabilities=$(cat audit.json | jq '.metadata.vulnerabilities')
          
          if [ "$vulnerabilities" = "null" ] || [ "$(echo $vulnerabilities | jq '.total')" = "0" ]; then
            echo "‚úÖ **No vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Vulnerabilities detected:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo $vulnerabilities | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            # Try to auto-fix
            npm audit fix --dry-run > fix-output.txt 2>&1
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Suggested fixes:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat fix-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  comment-results:
    name: Comment PR with Results
    runs-on: ubuntu-latest
    needs: [python-dependency-check, npm-dependency-check]
    if: always()
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Dependency Review Results')
            );
            
            const body = `## üîç Dependency Review Results
            
            The dependency compatibility and security checks have completed.
            Please review the job summaries for detailed results.
            
            - [Python Dependencies](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [NPM Dependencies](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *This comment is automatically generated by the dependency review workflow.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }